/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package data;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author Nacho
 */
public class Ppal extends javax.swing.JPanel {

    Ventana v;
    contadorFechaYHora fecha;
    generadorTablasDeMultiplicar tablas;
    generadorFibonacci fibonacci;
    
    /**
     * Creates new form Ppal
     */
    public Ppal(Ventana v) {
        this.v = v;
        initComponents();
        inicializarFuncionalidad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInferior = new javax.swing.JPanel();
        botonCerrar = new javax.swing.JButton();
        botoPararFecha = new javax.swing.JButton();
        botonPararTablas = new javax.swing.JButton();
        botonPararFibbonaci = new javax.swing.JButton();
        panelCentral = new javax.swing.JPanel();
        panelTablaMultiplicar = new javax.swing.JPanel();
        tituloTablaMultiplicar = new javax.swing.JLabel();
        scrollTablas = new javax.swing.JScrollPane();
        textoTablasMultiplicar = new javax.swing.JTextArea();
        panelFibonacci = new javax.swing.JPanel();
        tituloFibonacci = new javax.swing.JLabel();
        scrollFibonacci = new javax.swing.JScrollPane();
        textoFibonacci = new javax.swing.JTextArea();
        panelSuperior = new javax.swing.JPanel();
        tituloFechaYHora = new javax.swing.JLabel();
        FechaYHora = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new java.awt.BorderLayout());

        panelInferior.setBackground(new java.awt.Color(204, 255, 204));
        panelInferior.setOpaque(false);

        botonCerrar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        botonCerrar.setText("Cerrar App");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });
        panelInferior.add(botonCerrar);

        botoPararFecha.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        botoPararFecha.setText("Parar Fecha y Hora");
        botoPararFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoPararFechaActionPerformed(evt);
            }
        });
        panelInferior.add(botoPararFecha);

        botonPararTablas.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        botonPararTablas.setText("Parar Tablas de Multiplicar");
        botonPararTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPararTablasActionPerformed(evt);
            }
        });
        panelInferior.add(botonPararTablas);

        botonPararFibbonaci.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        botonPararFibbonaci.setText("Parar Sequencia de Fibonacci");
        botonPararFibbonaci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPararFibbonaciActionPerformed(evt);
            }
        });
        panelInferior.add(botonPararFibbonaci);

        add(panelInferior, java.awt.BorderLayout.SOUTH);

        panelCentral.setOpaque(false);
        panelCentral.setLayout(new java.awt.GridLayout(0, 1));

        panelTablaMultiplicar.setBackground(new java.awt.Color(204, 204, 204));
        panelTablaMultiplicar.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 5, 10, 5));
        panelTablaMultiplicar.setOpaque(false);
        panelTablaMultiplicar.setLayout(new java.awt.BorderLayout());

        tituloTablaMultiplicar.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        tituloTablaMultiplicar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloTablaMultiplicar.setText("Tablas de Multiplicar");
        panelTablaMultiplicar.add(tituloTablaMultiplicar, java.awt.BorderLayout.NORTH);

        textoTablasMultiplicar.setBackground(new java.awt.Color(204, 204, 204));
        textoTablasMultiplicar.setColumns(20);
        textoTablasMultiplicar.setRows(5);
        scrollTablas.setViewportView(textoTablasMultiplicar);

        panelTablaMultiplicar.add(scrollTablas, java.awt.BorderLayout.CENTER);

        panelCentral.add(panelTablaMultiplicar);

        panelFibonacci.setBackground(new java.awt.Color(204, 204, 204));
        panelFibonacci.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 10, 5));
        panelFibonacci.setOpaque(false);
        panelFibonacci.setLayout(new java.awt.BorderLayout());

        tituloFibonacci.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        tituloFibonacci.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloFibonacci.setText("Fibonacci");
        panelFibonacci.add(tituloFibonacci, java.awt.BorderLayout.NORTH);

        textoFibonacci.setBackground(new java.awt.Color(204, 204, 204));
        textoFibonacci.setColumns(20);
        textoFibonacci.setRows(5);
        scrollFibonacci.setViewportView(textoFibonacci);

        panelFibonacci.add(scrollFibonacci, java.awt.BorderLayout.CENTER);

        panelCentral.add(panelFibonacci);

        add(panelCentral, java.awt.BorderLayout.CENTER);

        panelSuperior.setBackground(new java.awt.Color(204, 255, 204));
        panelSuperior.setOpaque(false);
        panelSuperior.setLayout(new java.awt.BorderLayout());

        tituloFechaYHora.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        tituloFechaYHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloFechaYHora.setText("Fecha y Hora Actual:");
        panelSuperior.add(tituloFechaYHora, java.awt.BorderLayout.NORTH);

        FechaYHora.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        FechaYHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FechaYHora.setText("Aqui va la fecha y Hora actuales");
        panelSuperior.add(FechaYHora, java.awt.BorderLayout.CENTER);

        add(panelSuperior, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        
        tablas.finalizar();
        fecha.finalizar();
        fibonacci.finalizar();
        
        v.dispose();
    }//GEN-LAST:event_botonCerrarActionPerformed

    private void botoPararFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoPararFechaActionPerformed
        // TODO add your handling code here:
        fecha.finalizar();
    }//GEN-LAST:event_botoPararFechaActionPerformed

    private void botonPararTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPararTablasActionPerformed
        // TODO add your handling code here:
        tablas.finalizar();
    }//GEN-LAST:event_botonPararTablasActionPerformed

    private void botonPararFibbonaciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPararFibbonaciActionPerformed
        // TODO add your handling code here:
        fibonacci.finalizar();
    }//GEN-LAST:event_botonPararFibbonaciActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FechaYHora;
    private javax.swing.JButton botoPararFecha;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JButton botonPararFibbonaci;
    private javax.swing.JButton botonPararTablas;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelFibonacci;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTablaMultiplicar;
    private javax.swing.JScrollPane scrollFibonacci;
    private javax.swing.JScrollPane scrollTablas;
    private javax.swing.JTextArea textoFibonacci;
    private javax.swing.JTextArea textoTablasMultiplicar;
    private javax.swing.JLabel tituloFechaYHora;
    private javax.swing.JLabel tituloFibonacci;
    private javax.swing.JLabel tituloTablaMultiplicar;
    // End of variables declaration//GEN-END:variables

    
    
    private void inicializarFuncionalidad() {
        
        //pongo a funcionar el contador de la fecha y la hora
        fecha = new contadorFechaYHora();
        Thread tFecha = new Thread(fecha);
        tFecha.start();

        tablas = new generadorTablasDeMultiplicar();
        Thread tTablas = new Thread(tablas);
        tTablas.start();
        
        fibonacci = new generadorFibonacci();
        Thread tFibo = new Thread(fibonacci);
        tFibo.start();
    }
    
    private class contadorFechaYHora implements Runnable{

        boolean continuar= true;
        
        @Override
        public void run() {
            
            while(continuar){
                Calendar c= new GregorianCalendar();
                String fechaActual = c.getTime().toString();
                Ppal.this.getFechaYHora().setText(fechaActual);
            }
            
        }

        public boolean isContinuar() {
            return continuar;
        }

        public void setContinuar(boolean continuar) {
            this.continuar = continuar;
        }
        
        public void finalizar(){
            setContinuar(false);
        }
        
    }

    private class generadorTablasDeMultiplicar implements Runnable{

        boolean continuar= true;
        
        @Override
        public void run() {
            
            while(continuar){
                String cad="";
                try {
                    // Bucle que recorre los números del 1 al 10
                    for (int i = 1; i <= 10; i++) {
                    // Bucle que recorre los números del 1 al 10 para multiplicar
                        for (int j = 1; j <= 10; j++) {
                            if(!continuar)
                                return;
                            int resultado = i * j;
                            cad+=(i + " x " + j + " = " + resultado+"   ");
                            Ppal.this.getTextoTablasMultiplicar().setText(cad); //aqui se añade a la cadena
                            Thread.sleep(1000);
                        }
                        cad+="\n"; // Línea en blanco entre tablas
                    }
                } catch (InterruptedException e) {
                    JOptionPane.showMessageDialog(null,"La espera fue interrumpida.");
                }
                
            }
            
        }

        public boolean isContinuar() {
            return continuar;
        }

        public void setContinuar(boolean continuar) {
            this.continuar = continuar;
        }
        
        public void finalizar(){
            setContinuar(false);
        }
    }

    private class generadorFibonacci implements Runnable{

        boolean continuar= true;
        
        @Override
        public void run() {
            int n= 200;//numero de terminos que van a salir
            String cad="";

            while(continuar){
                   // Los dos primeros términos de la secuencia
                long a = 0, b = 1;

                // Imprimimos los primeros términos
                for (int i = 1; i <= n; i++) {
                    if(!continuar)
                        return;
                    
                    cad+=(a + " "); 
                    Ppal.this.getTextoFibonacci().setText(cad);// Imprime el término actual
                    
                    if(i%10==0)
                        cad+="\n";
                    
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        JOptionPane.showMessageDialog(null,"La espera fue interrumpida.");
                    }
                    long siguiente = a + b;    // Calcula el siguiente término
                    a = b;                     // El valor de 'b' se convierte en 'a' para el siguiente ciclo
                    b = siguiente;             // El siguiente término se convierte en 'b'
                }
                cad+="\n";  // Nueva línea al final
            }
            
            
        }

        public boolean isContinuar() {
            return continuar;
        }

        public void setContinuar(boolean continuar) {
            this.continuar = continuar;
        }
        
        public void finalizar(){
            setContinuar(false);
        }
        
    }
    
    public JLabel getFechaYHora() {
        return FechaYHora;
    }

    public JTextArea getTextoTablasMultiplicar() {
        return textoTablasMultiplicar;
    }

    public JTextArea getTextoFibonacci() {
        return textoFibonacci;
    }
    
    
    
}
